#! /usr/bin/env ruby
require 'pg'
require 'io/console'

@arguments = ARGV

class ExpenseData

	def initialize
		@connection = PG.connect(dbname:"expenses")
		setup_schema
	end

	def add_expense(amount, memo)
		date = Date.today
		sql = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3);"
		params = [amount, memo, date]
		@connection.exec_params(sql, params)
	end

	def delete_expense(id)
		sql = "SELECT * FROM expenses WHERE id = $1"
		result = @connection.exec_params(sql, [id])

		if result.ntuples == 1
			sql = "DELETE FROM expenses WHERE id = $1"
			@connection.exec_params(sql, [id])
		
			puts "The following expense has been deleted:"
			display_result(result)
		else
			puts "There is no expense with id '#{id}'."
		end
	end

	def list
		result = @connection.exec("SELECT * FROM expenses ORDER BY created_on ASC;")

		display_details(result)
	end

	def search_expenses(query)
		sql = "SELECT * FROM expenses WHERE memo ILIKE $1"
		result = @connection.exec_params(sql, ["%#{query}%"])
		
		display_details(result)
	end

	def delete_all_expenses
		@connection.exec("DELETE FROM expenses")
		puts "All expenses have been deleted."
	end

	private

	def setup_schema
		count = @connection.exec("SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'expenses'").values.flatten.shift.to_i
		
		if count == 0
			@connection.exec <<~SQL
				CREATE TABLE expenses (
					id serial PRIMARY KEY,
					amount numeric(6,2) NOT NULL CHECK (amount >= 0.01),
					memo text NOT NULL,
					created_on date NOT NULL
				);
			SQL
		end
	end

	def display_details(result)
		number_of_expenses = result.ntuples

		abort "There are no expenses." unless number_of_expenses > 0
		display_header(number_of_expenses)
		display_result(result)
		display_total(result)
	end

	def display_header(number_of_expenses)
		if number_of_expenses > 1
			puts "There are #{number_of_expenses} expenses."
		elsif number_of_expenses == 1 
			puts "There is 1 expense."
		end
	end

	def display_result(result)
		result.each do |tuple|
			columns = [ tuple["id"].rjust(3),
						tuple["created_on"].rjust(10),
						tuple["amount"].rjust(12),
						tuple["memo"] ]
			puts columns.join(" | ")
		end
	end

	def display_total(result)
		total = result.field_values("amount").map { |expense| expense.to_f}.sum
		puts "-" * 50
		puts "Total".ljust(19) + "#{total}".rjust(12)
	end
end

class CLI

	def initialize
		@application = ExpenseData.new
	end

	def run(arguments)
		command = arguments.shift

		case command
		when "list" then @application.list
		when "add" 
			amount = arguments.shift
			memo = arguments.shift
			abort "You must provide an amount and memo." unless amount && memo
			@application.add_expense(amount, memo)
		when "search"
			query = arguments.shift
			abort "You must provide a search term." unless query
			@application.search_expenses(query)
		when "delete"
			id = arguments.shift
			abort "You must provide an id for the item to be deleted." unless id
			@application.delete_expense(id)
		when "clear"
			@application.delete_all_expenses if confirm_clear
		else help_content
		end
	end

	def help_content
		puts <<~HELP
			An expense recording system
	
			Commands:
	
			add AMOUNT MEMO [DATE] - record a new expense
			clear - delete all expenses
			list - list all expenses
			delete NUMBER - remove expense with id NUMBER
			search QUERY - list expenses with a matching memo field
		HELP
	end

	private

	def confirm_clear
		puts "This will remove all expenses. Are you sure? (y/n)"
		answer = $stdin.getch
		case answer
		when "y"
			true
		when "n"
			false
		else
			puts "You must enter 'y' or 'n'"
			confirm_clear
		end
	end
end

CLI.new.run(ARGV)


